
    # def detect_frames(self, frames):
    #     batch_size = 20
    #     detections = []
    #     for i in range(0, len(frames), batch_size):
    #         detections_batch = self.model.predict(frames[i:i+batch_size], conf=True)
    #         detections += detections_batch
    #     return detections


    # def get_object_tracks(self, frames):
    #     detections = self.detect_frames(frames)

    #     tracks = {
    #         "players": [],
    #         # "goalkeepers": [],
    #         "referees": [],
    #         "balls": [],
    #     }
        
    #     for frame_num, detection in enumerate(detections):
    #         cls_names = detection.names
    #         cls_names_inv = {v:k for k, v in cls_names.items()}

    #         detection_supervision = sv.Detections.from_ultralytics(detections)

    #         # Convert goalkeeper to players
    #         for object_id, class_id in enumerate(detection_supervision):
    #             if cls_names[class_id] == "goalkeepers":
    #                 detection_supervision[object_id] = cls_names_inv["player"]

    #         detection_with_tracks = self.tracker.update_with_detections(detection_supervision)

    #         tracks["players"].append({})
    #         tracks["referees"].append({})
    #         tracks["balls"].append({})

    #         for frame_detection in detection_with_tracks:
    #             bbox = frame_detection[0].tolist()
    #             cls_id = frame_detection[3]
    #             track_id = frame_detection[4]

    #             if cls_id == cls_names_inv["player"]:
    #                 tracks["players"][frame_num][track_id]

    #         print(detection_with_tracks)


